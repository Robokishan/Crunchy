pipeline {
    agent any

    parameters {
        choice(name: 'SERVICE_NAME', choices: ['all', 'crawler', 'api', 'ui', 'chat'], description: 'Select service to build')
    }

    environment {
      DOCKERHUB_CREDENTIALS = credentials('dockerhubcredentials')
    }
    stages {
        stage('Building') {
      steps {
        script {
          def serviceName = params.SERVICE_NAME
          echo "Building: ${params.SERVICE_NAME}"
          if (serviceName == 'crawler' || serviceName == 'all') {
            dir('CrunchyCrawler') {
              sh 'docker build -t robokishan/crunchy:crawler -f Dockerfile .'
            }
          }
          if (serviceName == 'api' || serviceName == 'all') {
            dir('CrunchyRest') {
              sh 'docker build -t robokishan/crunchy:rest -f Dockerfile .'
            }
          }
          if (serviceName == 'ui' || serviceName == 'all') {
            dir('Ui') {
              sh 'docker build -t robokishan/crunchy:ui -f Dockerfile .'
            }
          }
          if (serviceName == 'chat' || serviceName == 'all') {
            dir('Chat') {
              sh 'docker build -t robokishan/crunchy:aichat -f Dockerfile .'
            }
          }
        }
      }
        }
        stage('push') {
      steps {
        script {
          sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
          echo 'Login Completed'
          def serviceName = params.SERVICE_NAME
          if (serviceName == 'crawler' || serviceName == 'all') {
            sh 'docker image push robokishan/crunchy:crawler'
          }
          if (serviceName == 'api' || serviceName == 'all') {
            sh 'docker image push robokishan/crunchy:rest'
          }
          if (serviceName == 'ui' || serviceName == 'all') {
            sh 'docker image push robokishan/crunchy:ui'
          }
          if (serviceName == 'chat' || serviceName == 'all') {
            sh 'docker image push robokishan/crunchy:aichat'
          }
        }
      }
        }
    }
    post {
      always {
        sh 'docker logout'
      }
    }
}
